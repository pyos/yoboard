### 5. SIGTERM to Exception.
import '/signal/signal'
import '/signal/SIGTERM'

signal SIGTERM $ _ _ -> raise KeyboardInterrupt

### 4. Data loader.
import '/os'
import '/gzip'
import '/pickle'
import '../config'

data = if
  # If this fails, the operator has to either fix corruption manually
  # or remove the database altogether.
  os.path.exists config.DATABASE => with fd = gzip.open config.DATABASE 'rb' => pickle.load fd
  otherwise => dict
    ids:      dict!
    boards:   dict!
    boardmap: dict!
    trees:    dict!
    posts:    dict!

### 3. Persistence.
import '/atexit'

save = atexit.register $ ->
  os.fork! == 0 =>
    with fd = gzip.open (config.DATABASE + '~') 'wb' => pickle.dump data fd
    os.path.exists config.DATABASE => os.unlink config.DATABASE
    os.rename (config.DATABASE + '~') config.DATABASE
    os._exit 0

### 2. Automatic scheduled dumping.
import '/threading'

schedule = _ ->
  timer = threading.Timer config.AUTOSYNC_INTERVAL (schedule <- save)
  timer.daemon = True
  timer.start!
schedule ()

### 1. The socket server.
import 'picklerpc/Server'
import 'boardcmds/commands'

except e => Server config.SERVER_ADDRESS $ commands data
       e :: KeyboardInterrupt => exit 0
### We have liftoff.
