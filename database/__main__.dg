import '/os'
import '/gzip'
import '/time'
import '/uuid'
import '/atexit'
import '/pickle'
import '/signal'
import '/threading'
import '/socket/AF_UNIX'
import '/socket/socket'
import '/select/select'

import 'boardcmds/commands'
import '../config'


Main = subclass object where
  __init__ = @datafile @aofile cmdfactory ~>
    @dirty = False
    @mtime = except
      err => (os.stat @datafile).st_mtime
      err :: FileNotFoundError => 0
    @data  = except
      err => with fd = gzip.open @datafile 'rb' => pickle.load fd
      err :: FileNotFoundError => dict
        ids:      dict!  # :: {str: int}
        boards:   dict!  # :: {str: Board}
        boardmap: dict!  # :: {str: {str: str}}
        trees:    dict!  # :: {str: {int: Either Thread Tree}}
        users:    dict!  # :: {str: Either [str] bool}
    @wrob, @cmds = cmdfactory @data
    @cmds !! '_abort'  = -> os.abort!
    @cmds !! '_dump'   = -> @dump
    @cmds !! '_exit'   = -> exit 0
    @cmds !! '_help'   = -> sorted @cmds
    @cmds !! '_status' = -> dict'
      mtime: @mtime
      dirty: @dirty
    None

  start = ~> if @aofile =>
    except
      err => fd = gzip.open @aofile 'rb'
      err :: FileNotFoundError =>
      err is None => with fd =>
        u = pickle.Unpickler fd
        while True => except
          err =>
            time, cmd, args = u.load!
            time > @mtime =>
              @dirty = True
              (@cmds !! cmd) *: args
          err :: EOFError  => break!
          err :: Exception =>

    # TODO open AOF for writing here

  run = cmd args ~>
    cmd in @wrob =>
      @aofile =>
        # TODO write to AOF here
        None
      @dirty = True
    (@cmds !! cmd) *: args

  dump = ~>
    @aofile =>
      # TODO clear AOF here
      # FIXME what if a normal save fails?
      None
    @dirty and os.fork! == 0 =>
      # By forking, we
      #   1. ensure that the database is still up for requests;
      #   2. create a complete copy of the data without wasting
      #      valuable processor time. This assumes copy-on-write semantics.
      #
      # NOTE: SIGCHLD must be handled properly to avoid trashing the process table.
      #
      with fd = gzip.open ('{}.{.hex}~'.format @datafile uuid.uuid4!) 'wb' =>
        # Use a temporary file to prevent partial writes.
        fd.write $ pickle.dumps @data
        fd.flush!
        os.fsync fd.fileno!
      os.rename fd.name @datafile
      os._exit 0
    @dirty = False
    @mtime = time.time!


repeat = interval fn -> (lock, stop.set) where
  lock = threading.Lock!
  stop = threading.Event!
  # `threading.Timer` only runs a function once. This is a *strict*
  # infinitely looping equivalent. (Except for the `cancel` method,
  # which is replaced with `stop.set!`.)
  thread = threading.Thread target: (-> while not $ stop.wait interval => with lock => fn!)
  thread.daemon = True
  thread.start!


# A closure is simply faster that the equivalent in a global namespace.
runserver = aof (family, addr) ->
  aof.start
  # Can't just KeyboardInterrupt a database.
  # That may leave it in a corrupt state.
  run = True
  # Even though we handle both relevant signals, using `atexit`
  # allows us to save the data even if an unexpected exception occurs.
  lock, _ = repeat config.AUTOSYNC_INTERVAL $ atexit.register $ -> aof.dump
  signal.signal signal.SIGINT  $ _ _ -> (run = False)
  signal.signal signal.SIGTERM $ _ _ -> (run = False)

  server = socket family
  server.bind addr
  server.listen 128
  # POSIX socket API states that UNIX sockets must be unlinked manually.
  if family is AF_UNIX and not (addr.startswith '\0') => atexit.register $ -> os.unlink addr

  dumps = pickle.dumps  # Attribute cache, I guess?
  elist = list!         # Creating empty lists is probably expensive.
  read  = dict' (server, None)

  while run => except
    err => sk = select read elist elist !! 0
    # Obviously, signals don't wait for syscalls to finish.
    # This exception is what we get on SIGINT/SIGTERM.
    err :: InterruptedError => run = False
    err is None => for s in sk => if
      s is server =>
        sock, _ = server.accept!
        # All pickles end with a STOP (`.`) opcode.
        # Normally, it would be hard to find with all the strings and stuff.
        # `Unpickler` can find it, but it needs *a lot* of calls to `read`.
        read !! sock = (pickle.Unpickler $ sock.makefile 'rb' 8192).load
      otherwise => except
        e =>
          cmd, args = (read !! s)!
          # We hold that lock created in `repeat` to prevent `save`
          # from forking off with an inconsistent database.
          s.sendall $ dumps $ with lock => aof.run cmd args
        e :: EOFError             => read !!~ s
        e :: ConnectionResetError => read !!~ s
        e :: Exception            => s.sendall $ dumps e

runserver (Main config.DATABASE config.DATABASE_AOF commands) config.SERVER_ADDRESS
