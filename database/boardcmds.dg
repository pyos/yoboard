import '/datetime/datetime'
import '/collections/deque'
import '/collections/defaultdict'

import 'Post'
import 'Tree'
import 'Board'
import 'Thread'
import 'IntRef'
import 'markup'
import '../config'


commands = data ->
  # Cutting corners wherever possible.
  # Using these cells instead of `data` allows us
  # to replace a dict lookup with two pointer lookups.
  RP_COUNT  = data !! 'ids'       # :: {str: int}
  RP_BOARD  = data !! 'boards'    # :: {str: Board}
  RP_CATMAP = data !! 'boardmap'  # :: {str: {str: str}}
  RP_POST   = data !! 'posts'     # :: {str: {int: Post}}
  RP_TREES  = data !! 'trees'     # :: {str: {int: Either Thread Tree}}
  # Volatile cache containers.
  # These are in the database because that
  #   1. allows flask workers to share cache;
  #   2. makes invalidating them easier.
  VC_BOARD  = defaultdict dict  # :: {str: {int: str}}
  VC_THREAD = defaultdict dict  # :: {(str, int): {str: str}}

  dict'
    # :: -> ()
    'clear_cache', ->
      VC_BOARD.clear!
      VC_THREAD.clear!

    # :: str int     -> Maybe str
    # :: str int str -> ()
    'get_cached_board', name page   -> (VC_BOARD !! name).get page
    'set_cached_board', name page x -> (VC_BOARD !! name).__setitem__ page x

    # :: str int str     -> Maybe str
    # :: str int str str -> ()
    'get_cached_thread', board num vt   -> (VC_THREAD !! (board, num)).get vt
    'set_cached_thread', board num vt x -> (VC_THREAD !! (board, num)).__setitem__ vt x

    # ::         -> {str: {str: str}}
    # :: str int -> Thread
    'boards',           -> RP_CATMAP
    'thread', board num -> RP_TREES !! board !! num

    # Fetch a list of threads on a board.
    # Also returns the title of the board and the number of pages.
    #
    # :: str int -> (str, [Thread], int)
    #
    'board', name page ->
      board    = RP_BOARD !! name
      pages, r = len board.threads `divmod` config.THREADS_PER_PAGE

      data = None where
        n = page * config.THREADS_PER_PAGE
        for t in take config.THREADS_PER_PAGE (drop n board.threads) =>
          # To reduce the amount of data transferred to the web server,
          # reply trees are removed.
          yield $ Thread t.root None t.latest t.skipped
  
      board.title, list data, pages + bool r

    # Create a new board or update the old one.
    #
    # :: str str str -> ()
    #
    'board_create', name title category ->
      if
        name in RP_BOARD =>
          old = RP_BOARD !! name
          RP_BOARD  !! name = Board name title category old.threads
          RP_CATMAP !! old.category !!~ name
        otherwise =>
          RP_COUNT !! name = 0
          RP_BOARD !! name = Board name title category list!
          RP_POST  !! name = dict!
          RP_TREES !! name = dict!
      RP_CATMAP !! category = RP_CATMAP.get category dict!
      RP_CATMAP !! category !! name = title
      None

    # Create a new thread, return its ID.
    #
    # :: str str str [(str, str)] -> int
    #
    'thread_create', board title text files ->
      boardo = RP_BOARD !! board
      rootid = RP_COUNT !! board += 1
      root   = Post rootid title False (markup.parse text) files rootid 0 datetime.now!
      thread = Thread root list! list! (IntRef 0)

      boardo.threads.insert 0 thread
      config.THREADS_PER_BOARD < len boardo.threads => boardo.threads.pop -1

      VC_BOARD.pop board None  # All pages are invalid now.
      RP_TREES !! board !! rootid = thread
      RP_POST  !! board !! rootid = root
      rootid

    # Create a new reply, return its ID.
    #
    # :: str int str bool str [(str, str)] -> int
    #
    'post_create', board parent title sage text files ->
      boardobj  = RP_BOARD !! board
      parentobj = RP_POST  !! board !! parent
      treeobj   = RP_TREES !! board !! parent
      threadobj = RP_TREES !! board !! parentobj.thread

      threadlen = len threadobj.latest + threadobj.skipped.value
      threadlen >= config.POSTS_UNTIL_AUTOSAGE => sage = True
      threadlen >= config.POSTS_PER_THREAD     => raise OverflowError

      postid  = RP_COUNT !! board += 1
      postobj = Post postid title sage (markup.parse text) files parentobj.thread parent datetime.now!
      curtree = Tree postobj list!

      RP_POST  !! board !! postid = postobj
      RP_TREES !! board !! postid = curtree
      treeobj.replies.append curtree
      threadobj.latest.append postobj

      len threadobj.latest > config.POSTS_ON_BOARD_PAGE =>
        threadobj.latest.pop 0
        threadobj.skipped.value += 1

      not sage =>
        boardobj.threads.remove   threadobj
        boardobj.threads.insert 0 threadobj

      VC_BOARD.pop   board                  None
      VC_THREAD.pop (board, postobj.thread) None
      postid
