import '/socket/socket'
import '/pickle/dumps'
import '/pickle/Unpickler'

import '/dg/compile'


Client = subclass object where
  __init__ = (@family, @addr) ~> None where except
    e => @reconnect
    # This error must not prevent the app from starting up.
    # `call` will automatically reconnect on first request.
    e :: OSError => None

  reconnect = ~>
    @socket = socket @family
    @socket.connect @addr
    @loader = Unpickler $ @socket.makefile 'rb' 16384

  __getattr__ = name ~> *: args ->
    response = @call name args
    response :: Exception => raise response
    response

  call = name args ~> except
    e =>
      @socket.sendall $ dumps (name, args)
      @loader.load!
    e :: OSError and e.errno in (32, 107) =>
      @reconnect
      @call name args


RecordMeta = subclass type where
  __new__ = name bases data ~> type.__new__ self name bases data where
    fields = data !! 'fields'
    xattrs = list $ map ('@' +) fields
    data.update $ dict'
      '__slots__',  data !! 'fields'
      '__init__',   eval $ compile $ 'self '                  + ' '.join xattrs + ' -> None'
      '__reduce__', eval $ compile $ 'self -> (@__class__, (' + ','.join xattrs + '))'


Record = subclass object metaclass: RecordMeta where fields = ()
Post   = subclass Record where fields = 'id', 'title', 'sage', 'text', 'files', 'thread', 'parent', 'timestamp', '_ip'
Board  = subclass Record where fields = 'id', 'title', 'category', 'threads'
Tree   = subclass Record where fields = 'root', 'replies'
Thread = subclass Record where fields = 'root', 'replies', 'latest', 'skipped', 'attached', 'closed'
