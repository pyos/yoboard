import '/socket/socket'
import '/pickle/dumps'
import '/pickle/Unpickler'
import '/types/FunctionType'

import '/dg/CodeType'


Client = subclass object where
  __init__ = (@family, @addr) ~> None where except
    e => @reconnect
    # This error must not prevent the app from starting up.
    # `call` will automatically reconnect on first request.
    e :: OSError => None

  reconnect = ~>
    @socket = socket @family
    @socket.connect @addr
    @loader = Unpickler $ @socket.makefile 'rb' 16384

  __getattr__ = name ~> *: args ->
    response = @call name args
    response :: Exception => raise response
    response

  call = name args ~> except
    e =>
      @socket.sendall $ dumps (name, args)
      @loader.load!
    e :: OSError and e.errno in (32, 107) =>
      @reconnect
      @call name args


RecordMeta = subclass type where
  __new__ = name bases data ~>
    data.update $ dict'
      '__slots__',      data !! 'fields'
      '__getstate__',   self -> None
      '__getnewargs__', FunctionType b.frozen globals! where
        b = CodeType '__getnewargs__' ('self',) function: True
        b.stacksize = len $ data !! 'fields'
        for s in data !! 'fields' =>
          b.append 'LOAD_FAST' 0
          b.append 'LOAD_ATTR' $ b.names !! s
        b.append 'BUILD_TUPLE' $ len $ data !! 'fields'
        b.append 'RETURN_VALUE'

      '__new__', FunctionType a.frozen globals! where
        a = CodeType '__new__' (('cls',) + data !! 'fields') function: True
        a.stacksize = 3
        a.pushconst object.__new__
        a.append 'LOAD_FAST'     0
        a.append 'CALL_FUNCTION' 1
        for (i, s) in enumerate (data !! 'fields') 1 =>
          a.append 'DUP_TOP'
          a.append 'LOAD_FAST'  i
          a.append 'ROT_TWO'
          a.append 'STORE_ATTR' $ a.names !! s
        a.append 'RETURN_VALUE'
    type.__new__ self name bases data


Record = subclass object metaclass: RecordMeta where fields = tuple!
Post   = subclass Record where fields = 'id', 'title', 'sage', 'text', 'files', 'thread', 'parent', 'timestamp', '_ip'
Board  = subclass Record where fields = 'id', 'title', 'category', 'threads'
Tree   = subclass Record where fields = 'root', 'replies'
Thread = subclass Record where fields = 'root', 'replies', 'latest', 'skipped', 'attached', 'closed'
