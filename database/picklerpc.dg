import '/pickle'
import '/socket'

END_OF_TRANSMISSION = b'\0\0\4\r\n'


Server = subclass object where
  __call__ = conn ~>
    while True =>
      buffer = b''
  
      while not $ buffer.endswith END_OF_TRANSMISSION =>
        buffer += indata = yield $ conn.recv 4096
        indata == b'' => raise StopIteration

      response = except
        e =>
          name, args = pickle.loads buffer
          (getattr self ('fn_' + name)) *: args
        e :: Exception => e

      yield $ conn.sendall $ pickle.dumps response + END_OF_TRANSMISSION


Client = subclass object where
  connect = @addr @port ~>
    @socket = socket.socket socket.AF_INET socket.SOCK_STREAM
    @socket.connect (@addr, @port)

  __getattr__ = name ~> *: args ->
    got = False
    cnt = 0

    while not got =>
      got, response = except
        e =>
          @socket.sendall $ pickle.dumps (name, args) + END_OF_TRANSMISSION

          buffer = b''
          while not $ buffer.endswith END_OF_TRANSMISSION =>
            buffer += indata = @socket.recv 4096
            indata == b'' => raise StopIteration

          True, pickle.loads buffer
        e :: StopIteration =>
          cnt += 1
          cnt == 3 => raise $ IOError 'server keeps dropping the connection'
          @connect @addr @port
          False, None

    response :: Exception => raise response
    response
