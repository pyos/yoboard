import '/os'
import '/pickle'
import '/socket'
import '/copy/deepcopy'

END_OF_TRANSMISSION = b'\0\0\4\r\n'

Server = subclass object where
  __call__ = conn ~>
    while True =>
      buffer = b''
  
      while not $ buffer.endswith END_OF_TRANSMISSION =>
        buffer += indata = yield $ conn.recv 1024
        indata == b'' => raise StopIteration

      response = except
        e =>
          name, args = pickle.loads buffer
          (getattr self ('fn_' + name)) *: args
        e :: Exception => e

      yield $ conn.sendall $ pickle.dumps response
      yield $ conn.sendall $ END_OF_TRANSMISSION


Client = subclass object where
  connect = @addr @port ~>
    @socket = socket.socket socket.AF_INET socket.SOCK_STREAM
    @socket.connect (@addr, @port)

  __getattr__ = name ~> *: args ->
    got = False

    while not got =>
      got, response = except
        e =>
          @socket.sendall $ pickle.dumps (name, args)
          @socket.sendall $ END_OF_TRANSMISSION

          buffer = b''
          while not $ buffer.endswith END_OF_TRANSMISSION =>
            buffer += indata = @socket.recv 1024
            indata == b'' => raise StopIteration

          True, pickle.loads buffer
        e :: StopIteration => False, None

    response :: Exception => raise response
    response


Persistence = subclass object where
  '''A file-based RPC that focuses on communication between timeframes.

    In other words, classes inheriting from this will have a `data`
    attribute that is automatically restored from a file on initialization
    and written back on destruction or at regular intervals.

    TODO:: store data at intervals.

  '''
  __init__ = @file @dump_interval ~> None where @data = @load
  __del__  = self -> @save @data

  save = data ~>
    '''Store data in a file.

      Yes, this forks off a process. Make sure to copy the data.

    '''
    os.fork! == 0 =>
      with fd = open (@file + '~') 'wb' => pickle.dump data fd
      os.unlink @file
      os.rename (@file + '~') @file

  load = ~>
    '''Load data from a file.

      This one is blocking.

    '''
    with fd = open @file 'rb' => pickle.load fd
