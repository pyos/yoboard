import '/pickle'
import '/socket'

# Pickle does not lend well to streaming because
# we have no idea where an object ends. We'll mark it
# with this (hopefully) unique character sequence.
END_OF_TRANSMISSION = b'\0\0\x04\r\n'


Server = subclass object where
  __call__ = conn ~>
    while True =>
      buffer = b''
  
      while not $ buffer.endswith END_OF_TRANSMISSION =>
        buffer += indata = yield $ conn.recv 4096
        indata == b'' => raise StopIteration

      response = except
        e =>
          name, args = pickle.loads buffer
          (getattr self ('fn_' + name)) *: args
        e :: Exception => e

      yield $ conn.sendall $ pickle.dumps response + END_OF_TRANSMISSION


Client = subclass object where
  __init__ = @addr @port ~>

  reconnect = ~>
    @socket = socket.socket socket.AF_INET socket.SOCK_STREAM
    @socket.connect (@addr, @port)

  __getattr__ = name ~> *: args ->
    @socket.sendall $ pickle.dumps (name, args) + END_OF_TRANSMISSION

    buffer = b''
    while not $ buffer.endswith END_OF_TRANSMISSION =>
      buffer += indata = @socket.recv 4096
      indata == b'' => raise $ IOError 'database connection lost'

    response = pickle.loads buffer
    response :: Exception => raise response
    response
