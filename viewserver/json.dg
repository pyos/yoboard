import '/flask/Blueprint'
import '/flask/abort'
import '/flask/request'
import '/flask/jsonify'
import '/flask/render_template'

import 'data'
import 'config'

import '../database/Post'
import '../database/Record'


confitems = set'
  # Stuff to return in `/.config`.
  'SITE_NAME'
  'SITE_TITLE'
  'POSTS_UNTIL_AUTOSAGE'
  'POSTS_PER_THREAD'
  'MAX_TITLE_LENGTH'
  'MAX_TEXT_LENGTH'
  'MAX_TEXT_LINES'
  'MAX_UPLOADS'
  'NOT_EMPTY'


jsonencode = x -> if
  x :: Post   => dict (None where for k in x.__slots__ => if k != 'ip' => yield (k, getattr x k))
  x :: Record => dict (None where for k in x.__slots__ => yield (k, jsonencode $ getattr x k))
  x :: list   => list  $ map jsonencode x
  x :: tuple  => tuple $ map jsonencode x
  otherwise   => x


board = board page: 0 -> jsonify $ zip ('title', 'threads', 'pages') $ jsonencode $ except
  err => data.board board page
  err :: KeyError => abort 404


thread = board thread -> jsonify $ jsonencode $ except
  err => data.thread board thread
  err :: KeyError => abort 404


mod = Blueprint 'json' __name__
mod.add_url_rule '/'                      'man'    $ -> render_template 'api.html' config: config
mod.add_url_rule '/.config'               'config' $ -> jsonify $ map (k -> (k, getattr config k)) confitems
mod.add_url_rule '/.boards'               'boards' $ -> jsonify $ data.boards!
mod.add_url_rule '/<board>/'              None board
mod.add_url_rule '/<board>/p<int:page>/'  None board
mod.add_url_rule '/<board>/<int:thread>/' None thread
