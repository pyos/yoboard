import '/os'
import '/time/time'
import '/uuid/uuid4'
import '/subprocess/Popen'

import '/flask/Blueprint'
import '/flask/abort'
import '/flask/redirect'
import '/flask/request'
import '/flask/render_template'
import '/flask/url_for'

import 'data'
import 'config'


pre_upload = title text files ->
  '''Ensure that a post is valid & make a list of safe filenames.

    pre_upload :: str str [File] -> [(str, str)]

  '''
  config.NOT_EMPTY and not (text or files)   => abort 400
  config.MAX_UPLOADS      < len files        => abort 400
  config.MAX_TITLE_LENGTH < len title        => abort 400
  config.MAX_TEXT_LENGTH  < len text         => abort 400
  config.MAX_TEXT_LINES <= text.count '\n'   => abort 400

  list xs where xs = None where for f in files => if f.filename =>
    yield $ tuple'
      str (int time!) + '.full.' + uuid4!.hex
      if f.mimetype.startswith 'image/' => str (int time!) + '.min.' + uuid4!.hex
         # Can't downscale that, will use a glyphicon instead.
         otherwise => None
      f.mimetype


post_upload = files fnames ->
  '''Store the files in a local filesystem & generate thumbnails.

    post_upload :: [File] [(str, str)] -> ()

  '''
  for (file, (fn, tn, *_)) in zip (filter (x -> x.filename) files) fnames =>
    fp = os.path.join config.UPLOAD_DIR fn
    file.save fp
    file.mimetype.startswith 'image/' =>
      tp = os.path.join config.UPLOAD_DIR tn
      except e => Popen $ list' 'convert' fp '-resize' ('{0}x{0}>'.format config.THUMBNAIL_SIZE) tp
             e => None


root = ->
  render_template 'base.html'
    board: ''
    config: config
    boards: data.boards!


board = board page: 0 ->
  data.get_cached_board board page or
    tt, bd, pn = except err => data.board board page
                        err :: KeyError => abort 404
    result = render_template 'board.html'
      this:    bd
      title:   tt
      page:    page
      board:   board
      config:  config
      boards:  data.boards!
      pagenum: pn
    data.set_cached_board board page result
    result


thread_create = board ->
  '''Make a new thread.

    field `title`:: a short summary of the thread.
    field `text`::  initial message.
    field `file`::  any number of attachments.

  '''
  fnames = pre_upload
    title  = request.form.get      'title' ''
    text   = request.form.get      'text'  ''
    files  = request.files.getlist 'file'

  except err => thread = data.thread_create board title text fnames
         err :: KeyError => abort 404
         err is None     => post_upload files fnames
  redirect $ url_for 'html.thread_redirect' board: board thread: thread


thread_reply = board thread ->
  '''Make a new message.

    field `parent`:: the message to reply to.
    field `title`::  a short summary of the message.
    field `sage`::   set iff the author was displeased with the thread.
    field `text`::   a long message.
    field `file`::   any number of attachments.

  '''
  parent = int  $ request.form.get 'parent' thread
  sage   = bool $ request.form.get 'sage'   False
  fnames = pre_upload
    title  = request.form.get      'title' ''
    text   = request.form.get      'text'  ''
    files  = request.files.getlist 'file'

  except e => data.post_create board parent title sage text fnames
         e :: KeyError      => abort 404
         e :: OverflowError => abort 403
         e is None          => post_upload files fnames
  redirect $ url_for 'html.thread_redirect' board: board thread: thread


thread_redirect = board thread ->
  view = request.cookies.get 'view_type'

  redirect $ url_for board: board thread: thread $ if
    view == 'tree' => 'html.thread_tree'
    otherwise      => 'html.thread_list'


thread_render = board thread t template ->
  data.get_cached_thread board thread t or
    as_list = None
    as_list = t ->
      yield t.root
      for q in t.replies => yield from: (as_list q)
    th = except err => data.thread board thread
                err :: KeyError => abort 404
    result = render_template template
      this:   th
      posts: (as_list th)
      board:  board
      config: config
      boards: data.boards!
    data.set_cached_thread board thread t result
    result


thread_tree = board thread -> thread_render board thread 0 'tree.html'
thread_list = board thread -> thread_render board thread 1 'list.html'


mod = Blueprint 'html' __name__
mod.add_url_rule '/'                           None root
mod.add_url_rule '/<board>/'                   None board
mod.add_url_rule '/<board>/p<int:page>/'       None board
mod.add_url_rule '/<board>/'                   None thread_create methods: (list' 'POST')
mod.add_url_rule '/<board>/<int:thread>/'      None thread_reply  methods: (list' 'POST')
mod.add_url_rule '/<board>/<int:thread>/'      None thread_redirect
mod.add_url_rule '/<board>/<int:thread>/tree/' None thread_tree
mod.add_url_rule '/<board>/<int:thread>/list/' None thread_list
