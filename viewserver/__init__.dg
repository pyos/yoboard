import '/os'
import '/time'
import '/random/choice'

import '/flask/Flask'
import '/flask/render_template'
import '/flask/send_from_directory'
import '/jinja2/MemcachedBytecodeCache'
import '/werkzeug/contrib/cache/SimpleCache'

import '../config'
import '../database/Client'


Yoboard = subclass $ Flask where
  __init__ = *: a **: k ~>
    Flask.__init__ self *: a **: k

    @config.from_object config
    @jinja_env.add_extension  $ import '/hamlike/HamlikeExtension'
    @jinja_env.add_extension  $ import 'markup/MdExtension'
    @jinja_env.bytecode_cache = MemcachedBytecodeCache SimpleCache!
    @jinja_env.autoescape     = True
    @jinja_env.trim_blocks    = True
    @jinja_env.lstrip_blocks  = True
    @jinja_env.filters.update $ dict'
      'randfile', fd -> choice (os.listdir fd or list' None)
      'relpath',  fp -> os.path.relpath fp $ os.path.dirname config.__file__
      'strftime', ts fmt: '%d.%m.%Y %H:%M:%S' -> time.strftime fmt $ time.localtime ts
      'flattree', xs ->
        ys = list' xs
        for (i, y) in enumerate ys =>
          ys !! i = y.root
          ys.extend y.replies
        ys

    @add_url_rule '/static/upload/<path:filename>' 'upload' $ bind send_from_directory config.UPLOAD_DIR as_attachment: True
    @add_url_rule '/static/banner/<path:filename>' 'banner' $ bind send_from_directory config.BANNER_DIR as_attachment: True

    @register_blueprint $ import 'core/mod'
    @register_blueprint $ import 'admin/mod'
    @register_error_handler 400 @onerror
    @register_error_handler 403 @onerror
    @register_error_handler 404 @onerror
    @register_error_handler 500 @onexcept

  onexcept = e ~> render_template 'error.hamlike' err: e code: 500,    500
  onerror  = e ~> render_template 'error.hamlike' err: e code: e.code, e.code

data = Client  config.CLIENT_ADDRESS
app  = Yoboard __name__
