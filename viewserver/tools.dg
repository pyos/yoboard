import '/os/path'
import '/uuid/uuid4'
import '/functools/update_wrapper'
import '/subprocess/Popen'
import '/subprocess/PIPE'

import '/flask/abort'
import '/flask/jsonify'
import '/flask/request'

import 'data'
import 'config'
import 'markup/parse'

import '../database/Record'


jsreturn  = x -> jsonify $ jsprepare x
jsprepare = x -> if
  x :: Record => dict (where for (k, v) in zip x.fields x => k !! 0 != '_' => yield (k, jsprepare v))
  x :: dict   => dict $ zip x.keys! $ map jsprepare x.values!
  x :: list   => list $ map jsprepare x
  otherwise   => x


randname = alphabet: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.' ->
  c = uuid4!.int
  s = len alphabet
  while c =>
    yield $ alphabet !! (c % s)
    c //= s


mimeroute = f -> update_wrapper wrapped: f $ *: a **: k ->
  json = request.accept_mimetypes !! 'application/json'
  html = request.accept_mimetypes !! 'text/html'
  f isjson: (html < json) *: a **: k


FILES = list'
  # (extensions), class, (full thumbnail sizespec -> create a thumbnail)
  ('.jpg', '.jpeg', '.png'), '', fp tp sz -> Popen ('convert', fp,         '-resize', sz, tp)
  ('.gif',),             'anim', fp tp sz -> Popen ('convert', fp + '[0]', '-resize', sz, tp)
  ('.webm',),           'video', fp tp sz ->
    ff = Popen ('ffmpeg', '-v', 'quiet', '-i', fp, '-vframes', '1', '-f', 'image2', '-') stdout: PIPE
    im = Popen ('convert', '-', '-resize', sz, tp) stdin: ff.stdout


make_post = board parent sage title text files ->
  files  = list $ filter (f -> f.filename) files
  fnames = list
    where for f in files => yield $
      name  = ''.join randname!
      ext   = path.splitext f.filename !! 1
      name + ext, name + '.m' + '.jpg', next
        where
          for (exts, class, _) in FILES => ext in exts => yield class
          abort 400 'Unsupported file type.'

  config.NOT_EMPTY and not (text or files) => abort 400 'Either a message or a file is required.'
  config.MAX_UPLOADS      < len files      => abort 400 'Too many files.'
  config.MAX_TITLE_LENGTH < len title      => abort 400 'The title is too long.'
  config.MAX_TEXT_LENGTH  < len text       => abort 400 'The text is too long.'
  config.MAX_TEXT_LINES <= text.count '\n' => abort 400 'The text contains too many lines.'

  htext  = parse text
  thread = if
    parent == 0 => data.thread_create board        title      htext fnames request.remote_addr
    otherwise   => data.post_create   board parent title sage htext fnames request.remote_addr

  for (file, (fn, tn, flags)) in zip files fnames =>
    fp = path.join config.UPLOAD_DIR fn
    tp = path.join config.UPLOAD_DIR tn
    file.save fp
    for (_, cls, h) in FILES => cls == flags => h fp tp $ '{0}x{0}>'.format config.THUMBNAIL_SIZE

  thread
