import '/os/path'
import '/time/time'
import '/uuid/uuid4'
import '/functools/update_wrapper'
import '/subprocess/Popen'

import '/flask/abort'
import '/flask/jsonify'
import '/flask/request'

import 'data'
import 'config'
import 'markup/parse'

import '../database/Record'


as_list = tree ->
  yield tree.root
  for subtree in tree.replies => for i in as_list subtree => yield i


get_or_404 = f *: args -> except
  e => f *: args
  e :: OverflowError => abort 403 'This thread is closed.'
  e :: KeyError      => abort 404


json_encode = x -> if
  x :: Record => dict (-> for k in x.__slots__ => if k !! 0 != '_' => yield (k, json_encode $ getattr x k))!
  x :: dict   => dict $ zip x.keys! $ map json_encode x.values!
  x :: list   => list $ map json_encode x
  otherwise   => x


with_json_equivalent = onjson onhtml ->
  update_wrapper wrapped: onjson $ **: args ->
    html = request.accept_mimetypes !! 'text/html'
    json = request.accept_mimetypes !! 'application/json'
    if html >= json => onhtml **: args
       otherwise    => jsonify $ json_encode $ onjson **: args


make_post = board parent sage title text files ->
  len files == 1 and (head files).filename == '' =>
    # Werkzeug adds a file with an empty filename for some reason.
    files.pop 0

  config.NOT_EMPTY and not (text or files)   => abort 400 'Either a message or a file is required.'
  config.MAX_UPLOADS      < len files        => abort 400 'Too many files.'
  config.MAX_TITLE_LENGTH < len title        => abort 400 'The title is too long.'
  config.MAX_TEXT_LENGTH  < len text         => abort 400 'The text is too long.'
  config.MAX_TEXT_LINES <= text.count '\n'   => abort 400 'The text contains too many lines.'

  fnames = list xs where xs = None where for f in files => if
    f.mimetype.startswith 'image/' => yield $ tuple'
      name = str time! + '.full.' + uuid4!.hex + path.splitext f.filename !! 1
      name.replace '.full.' '.min.'
    otherwise => abort 400 'Unknown file type.'

  htext  = parse text
  thread = if
    parent == 0 => get_or_404 data.thread_create board        title      htext fnames request.remote_addr
    otherwise   => get_or_404 data.post_create   board parent title sage htext fnames request.remote_addr

  for (file, (fn, tn)) in zip files fnames =>
    fp = path.join config.UPLOAD_DIR fn
    tp = path.join config.UPLOAD_DIR tn
    file.save fp
    Popen $ list' 'convert' fp '-resize' ('{0}x{0}>'.format config.THUMBNAIL_SIZE) tp

  thread
